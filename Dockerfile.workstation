# This is our develop image
ARG BASE_IMAGE
FROM ${BASE_IMAGE:-swedishembedded/build:latest}

ARG EMACS_VERSION=28.1
ARG NEOVIM_VERSION=v0.9.5
ARG NODE_VERSION v21.5.0

SHELL ["bash", "-c"]
USER root
RUN mkdir -p /build/platform && \
	chown -R user:user /build

RUN apt-get update && \
	echo "Installing latest nodejs packages" && \
	curl -sL https://deb.nodesource.com/setup_21.x  | bash - && \
	apt-get -qy install nodejs && \
	echo "Installing emacs dependencies" && \
	apt-get -qy install --no-install-recommends \
		cmake \
		ncurses-dev \
		libacl1-dev \
		libgccjit0 \
		libgccjit-10-dev \
		libjansson4 \
		libjansson-dev \
		gnutls-dev \
		ripgrep \
		wget && \
	echo "Installing neovim dependencies" && \
	apt-get -qy install --no-install-recommends \
		luarocks \
		xclip \
		biber \
		gettext && \
	echo "Installing terminal utilities" && \
	apt-get -qy install --no-install-recommends \
		tree \
		tig \
		gitk \
		picocom \
		tmux && \
	echo "Installing cypress dependencies" && \
	apt-get -qy install --no-install-recommends \
		libgtk2.0-0 \
		libgtk-3-0 \
		libgbm-dev \
		libnotify-dev \
		libnss3 \
		libxss1 \
		libasound2 \
		libxtst6 \
		xauth \
		xvfb && \
	echo "Installing language servers and support tools" && \
	apt-get -qy install --no-install-recommends \
		clangd \
		bash-completion \
		yamllint && \
	echo "Installing debugging tools" && \
	apt-get -qy install --no-install-recommends \
		btop \
		bc \
		gdb-multiarch && \
	echo "Installing additional tools" && \
	apt-get install --no-install-recommends -y \
		openbox \
		python3-xdg \
		libpython3-dev \
		xvfb \
		xterm \
		iputils-ping \
		xz-utils && \
	echo "Cleaning up cache.." && \
	apt-get clean -y && \
	apt-get autoremove --purge -y && \
	rm -rf /var/lib/apt/lists/*

# Install ruby packages
RUN gem install \
	tmuxinator \
	neovim

# Install additional npm packages
RUN npm install -g \
	npm \
	tree-sitter \
	neovim \
	pyright \
	bash-language-server \
	yaml-language-server \
	yarn \
	vim-language-server && \
	npm cache clean --force

# Install additional python packages
RUN pip3 install \
	pre-commit \
	mypy \
	robotframework-lsp \
	pynvim && \
	echo "Installing renode-run" && \
	pip3 install --upgrade git+https://github.com/antmicro/renode-run.git && \
	pip3 cache purge

# Build emacs
RUN wget -q https://ftpmirror.gnu.org/emacs/emacs-${EMACS_VERSION}.tar.gz https://ftpmirror.gnu.org/emacs/emacs-${EMACS_VERSION}.tar.gz.sig && \
	tar zxf emacs-${EMACS_VERSION}.tar.gz && \
	cd emacs-${EMACS_VERSION} && \
	./configure \
	--with-x-toolkit=no \
	--with-xpm=ifavailable \
	--with-jpeg=ifavailable \
	--with-gif=ifavailable \
	--with-tiff=ifavailable \
	&& \
	make && \
	make install && \
	cd .. && \
	rm -rf emacs-*

USER root

# Install neovim
RUN git clone https://github.com/neovim/neovim.git && \
	cd neovim && \
	git checkout $NEOVIM_VERSION && \
	make CMAKE_BUILD_TYPE=RelWithDebInfo && \
	make install && \
	cd .. && \
	rm -rf neovim


# Add entrypoint script
ADD entrypoint.sh /home/user/init
RUN dos2unix /home/user/init

# Adjust directory permissions
RUN mkdir /workspaces/
RUN chown user:user /workspaces/
RUN chown -R user:user /home/user/

# Switch to 'user' context
USER user

# Install DooM emacs as user
RUN git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d && \
	~/.emacs.d/bin/doom install --no-env --no-fonts

# Add configuration as user
COPY --chown=user:user conf/doom /home/user/.doom.d/
RUN ~/.emacs.d/bin/doom env && \
	~/.emacs.d/bin/doom upgrade

COPY --chown=user:user conf/.tmux.conf /home/user/.tmux.conf
COPY --chown=user:user conf/.tmux.conf.local /home/user/.tmux.conf.local
COPY --chown=user:user conf/tmuxinator /home/user/.config/tmuxinator
COPY --chown=user:user conf/.bashrc /home/user/.bashrc
COPY --chown=user:user conf/pygdbinit /home/user/.pygdbinit
COPY --chown=user:user conf/nvim /home/user/.config/nvim/

# Install nvim plugin manager, vim plugins and syntax hightlighting for
# important languages.
# NOTE: current vim config fails plug install the first time but it does succeed
# the second time so that's why we need to run it twice and ignore the first
# failure.
# NOTE: the TSUpdate commands need to be run on separate lines because vim has a
# limit on how many can be chained together.
USER root

RUN chown -R user:user /home/user/.config

USER user

RUN curl -fLo ~/.local/share/nvim/site/autoload/plug.vim \
	--create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim && \
	nvim -e --headless '+PlugInstall --sync' +qa || true && \
	nvim -e --headless '+PlugInstall --sync' +qa && \
	nvim -e --headless '+TSInstall all' +qa

# Configure environment variables
ENV DISPLAY=:0
ENV CMAKE_PREFIX_PATH=/opt/toolchains

# Configure rust path
ENV RUSTUP_HOME=/opt/rust
ENV CARGO_HOME=/opt/rust
ENV PATH=$PATH:/opt/rust/bin/

# Set working directory
WORKDIR /workspaces/

# Configure default shell and editor
ENV SHELL=/bin/bash
ENV EDITOR=nvim

# Set the init script
ENTRYPOINT ["/home/user/init"]

# Launch bash shell by default
CMD ["/bin/bash"]
