# This is our build image
ARG BASE_IMAGE
FROM ${BASE_IMAGE:-zephyrprojectrtos/ci:latest}

ARG WGET_ARGS="-q --show-progress --progress=bar:force:noscroll --no-check-certificate"
ARG LEDGER_VERSION=3.3.2

# Set default shell during Docker image build to bash
SHELL ["/bin/bash", "-c"]

# Set non-interactive frontend for apt-get to skip any user confirmations
ENV DEBIAN_FRONTEND=noninteractive

# Install base packages
RUN apt-get -y update && \
	apt-get -y upgrade && \
	apt-get install --no-install-recommends -y \
	bc

# Install additional python packages
RUN pip3 install \
	cmakelang \
	click \
	clang==12.0.1 \
	black==22.3.0 \
	robotframework==4.0.1

# Extra dependencies for documentation generation
RUN apt-get update && \
	apt-get -qy install --no-install-recommends \
	doxygen-latex dot2tex  \
	librsvg2-bin \
	texlive-latex-base \
	texlive-latex-extra \
	latexmk \
	texlive-fonts-recommended \
	ruby bundler

# Dependencies for asciidoc pdf generation
RUN apt-get update && \
	apt-get -qy install --no-install-recommends \
	curl aspell aspell-en

RUN gem install \
	asciidoctor-pdf \
	asciidoctor-html5s

# Node JS
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -

# This will install nodejs and npm after installer finished
RUN apt-get update && \
	apt-get -qy install --no-install-recommends \
	nodejs

# Ruby dependencies for CMock
RUN gem install \
	bundler \
	rake \
	manifest \
	require_all \
	constructor \
	diy

# Dependencies for code checking
RUN apt-get update && \
	apt-get -qy install --no-install-recommends \
	clang-format libclang-12-dev

# Dependencies for ledger
RUN apt-get update && \
	apt-get -qy install --no-install-recommends \
	build-essential cmake doxygen \
	libboost-system-dev libboost-dev python3-dev gettext git \
	libboost-date-time-dev libboost-filesystem-dev \
	libboost-iostreams-dev libboost-python-dev libboost-regex-dev \
	libboost-test-dev libedit-dev libgmp3-dev libmpfr-dev texinfo tzdata

# Ledger
RUN wget https://github.com/ledger/ledger/archive/refs/tags/v${LEDGER_VERSION}.tar.gz && \
	tar -xzf v${LEDGER_VERSION}.tar.gz && \
	pushd ledger-${LEDGER_VERSION} && \
	mkdir build && (cd build; cmake ..) && \
	make -C build && \
	sudo make -C build install

# Dependencies for image tests
RUN apt-get update && \
	apt-get -qy install --no-install-recommends \
	imagemagick

# Dependencies for tags generation on ci
RUN apt-get update && \
	apt-get -qy install --no-install-recommends \
	cscope

# Other dependencies
RUN apt-get update && \
	apt-get -qy install --no-install-recommends \
	git-lfs \
	octave

# Kicad for building PCBs on CI
RUN add-apt-repository --yes ppa:kicad/kicad-6.0-releases && \
	apt-get update && \
	apt-get -qy install --install-recommends kicad && \
	pip3 install --no-compile kibot

# OSS CAD Suite (full suite for building verilog stuff)
RUN wget ${WGET_ARGS} https://github.com/YosysHQ/oss-cad-suite-build/releases/download/2022-11-05/oss-cad-suite-linux-x64-20221105.tgz && \
	tar xf oss-cad-suite-linux-x64-20221105.tgz -C /opt

# Clean up stale packages
RUN apt-get clean -y && \
	apt-get autoremove --purge -y && \
	rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /builds
VOLUME ["/builds"]
